#!/usr/bin/env perl

use strict;
# use warnings::unused;
use warnings;
use diagnostics;

my @modules;

BEGIN {
	@modules = (
		'Authen::NTLM', 'Authen::SASL', 'Digest::HMAC_MD5',
		'IO::Socket::SSL', 'Mail::IMAPClient', 'MIME::EncWords',
		'Config::Auto', 'Mozilla::CA', 'FindBin',
	);
	my @needfull;
	foreach my $module(@modules) {
		eval "use $module";
		if($@) {
			push @needfull, $module;
		}
	}
	if(scalar(@needfull)) {
		system('cpan -i ' . join(' ', @needfull));
	}
}

foreach my $module(@modules) {
	my $version;
	if($module =~ /(.+)\s(.+)$/) {
		$module = $1;
		$version = $2;
	}
	eval "require $module";
	if($@) {
		die $@;
	}
	$module->import();
	# if($version && ($module::VERSION < $version)) {
		# die "$module: need $version got ", $module::VERSIOn;
	# }
}

my $conf = File::Spec->catdir(
	$FindBin::Bin,
	File::Spec->updir(),
	'conf',
	'reporter',
);

my $config;

eval {
	$config = Config::Auto::parse($conf);
};
if($@) {
	die "Configuration error: $@ $conf";
}

my $server = $config->{hotmail}->{server};
my $user = $config->{hotmail}->{user};
my $password = $config->{hotmail}->{password};

my $imap = Mail::IMAPClient->new(Server => $server,
				User => $user,
				Password => $password,
				Ssl => 1,
				Socket => IO::Socket::SSL->new (
					Proto => 'tcp',
					PeerAddr => $server,
					PeerPort => 993,
					SSL_verify_mode => SSL_VERIFY_NONE,
					SSL_ca_file => Mozilla::CA::SSL_ca_file(),
				),
			) or
	die "Cannot connect to $server: $@";

# print "Folders: ", join("\n\t", @{$imap->folders()}), "\n";

print_headers({ imap => $imap, folder => 'Junk' });
print_headers({ imap => $imap, folder => 'Bulk Mail' });
print_headers({ imap => $imap, folder => 'Unwanted' });
print_headers({ imap => $imap, folder => 'Clutter' });
print_headers({ imap => $imap, folder => 'Archive' });
print_headers({ imap => $imap, folder => 'Archives' });

$imap->logout();

sub print_headers {
	my $params = shift;
	my $folder = $params->{'folder'};
	my $imap = $params->{'imap'};

	unless($imap->select($folder)) {
		warn "Select $folder error: ", $imap->LastError();
		return;
	}

	unless($imap->message_count) {
		# print "$folder: ", $imap->message_count(), " messages\n";
		$imap->close();
		return;
	}

	my @messages = $imap->messages($folder);

	my $nummessages = $#messages + 1;

	print "Showing subjects for $nummessages at $server\n";

	sub CATCH_PIPE { }
	$SIG{'PIPE'} = "CATCH_PIPE";

	foreach (@messages) {
		my %headers = %{$imap->parse_headers($_, 'To', 'Subject')};

		if($headers{'To'}) {
			print $headers{'To'}[0], ': ';
		}
		if($headers{'Subject'}) {
			print scalar(MIME::EncWords::decode_mimewords($headers{'Subject'}[0]));
		}
		print "\n";
	}
	$imap->close();
}
